"use client"

import React, { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Globe, Lock, Trophy, Shield, Key, ArrowRight, ExternalLink, Code2, Check, Wallet, Award, Clock, ChevronRight, Info, Loader2 } from 'lucide-react'

// Constants for scoring and tokenomics
const MIN_SCORE_FOR_ELIGIBILITY = 20
const BASE_TOKEN_REWARD = 1000
const BONUS_TOKENS_PER_POINT = 100
const MAX_TOTAL_SCORE = 50 // Sum of all platform points
const VERIFICATION_DURATION_SECONDS = 5

const VERIFICATION_PLATFORMS = [
  { id: "github", name: "GitHub", points: 12, requirement: "â‰¥50 stars on repos" },
  { id: "spotify", name: "Spotify", points: 12, requirement: "Paid subscription" },
  { id: "airbnb", name: "Airbnb", points: 10, requirement: "5+ stays" },
  { id: "steam", name: "Steam", points: 6, requirement: "100+ hours played" },
  { id: "amazon", name: "Amazon", points: 6, requirement: "5+ orders" },
  { id: "twitter", name: "Twitter/X", points: 4, requirement: "Active account" },
]

interface VerificationTimers {
  [platformId: string]: number
}

interface VerificationIntervals {
  [platformId: string]: NodeJS.Timeout
}

export default function BringIDApp() {
  const [currentStep, setCurrentStep] = useState(0)
  const [extensionInstalled, setExtensionInstalled] = useState(false)
  const [walletConnected, setWalletConnected] = useState(false)
  const [walletAddress, setWalletAddress] = useState("")
  const [keyCreated, setKeyCreated] = useState(false)
  const [bringScore, setBringScore] = useState(0)
  const [verifications, setVerifications] = useState({
    github: false,
    twitter: false,
    steam: false,
    airbnb: false,
    amazon: false,
    spotify: false,
  })
  const [claimInitiated, setClaimInitiated] = useState(false)
  const [claimableTokens, setClaimableTokens] = useState(0)

  const [verifyingId, setVerifyingId] = useState<string | null>(null)
  const [verificationTimers, setVerificationTimers] = useState<VerificationTimers>({})
  const intervalsRef = useRef<VerificationIntervals>({})

  const [isConnectingWallet, setIsConnectingWallet] = useState(false)
  const [isCreatingKey, setIsCreatingKey] = useState(false)

  useEffect(() => {
    let score = 0
    VERIFICATION_PLATFORMS.forEach((platform) => {
      if (verifications[platform.id as keyof typeof verifications]) {
        score += platform.points
      }
    })
    setBringScore(score)

    if (score >= MIN_SCORE_FOR_ELIGIBILITY) {
      setClaimableTokens(BASE_TOKEN_REWARD + (score - MIN_SCORE_FOR_ELIGIBILITY) * BONUS_TOKENS_PER_POINT)
    } else {
      setClaimableTokens(0)
    }
  }, [verifications])

  // Cleanup intervals on component unmount
  useEffect(() => {
    return () => {
      Object.values(intervalsRef.current).forEach(clearInterval)
    }
  }, [])

  const connectWallet = async () => {
    setIsConnectingWallet(true)
    setTimeout(() => {
      setWalletConnected(true)
      setWalletAddress("0x742d...8923")
      setCurrentStep(3)
      setIsConnectingWallet(false)
    }, 1500)
  }

  const createKey = async () => {
    setIsCreatingKey(true)
    setTimeout(() => {
      setKeyCreated(true)
      setCurrentStep(4)
      setIsCreatingKey(false)
    }, 2000)
  }

  const handleVerifyPlatform = (platformId: string) => {
    if (intervalsRef.current[platformId]) {
      clearInterval(intervalsRef.current[platformId])
    }

    setVerifyingId(platformId)
    setVerificationTimers((prev) => ({ ...prev, [platformId]: VERIFICATION_DURATION_SECONDS }))

    intervalsRef.current[platformId] = setInterval(() => {
      setVerificationTimers((prevTimers) => {
        const newTime = (prevTimers[platformId] || 0) - 1
        if (newTime <= 0) {
          clearInterval(intervalsRef.current[platformId])
          delete intervalsRef.current[platformId]
          setVerifications((prevVerifs) => ({ ...prevVerifs, [platformId]: true }))
          setVerifyingId(null)
          return { ...prevTimers, [platformId]: 0 }
        }
        return { ...prevTimers, [platformId]: newTime }
      })
    }, 1000)
  }

  const initiateTokenClaim = () => {
    setClaimInitiated(true)
    setCurrentStep(5)
  }

  const formatTime = (totalSeconds: number | undefined): string => {
    if (totalSeconds === undefined || totalSeconds < 0) totalSeconds = 0
    const minutes = Math.floor(totalSeconds / 60)
    const seconds = totalSeconds % 60
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
  }

  const StepIndicator = ({ step, active, completed }: { step: number; active: boolean; completed: boolean }) => (
    <div
      className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-all ${
        completed
          ? "bg-primary text-primary-foreground"
          : active
            ? "bg-foreground text-background"
            : "bg-muted text-muted-foreground"
      }`}
    >
      {completed ? <Check className="w-4 h-4" /> : step}
    </div>
  )

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b">
        <div className="container mx-auto px-4 py-3 max-w-5xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-6 h-6 bg-foreground rounded-sm flex items-center justify-center">
                {/* Placeholder SVG Logo */}
                <svg width="350" height="325" viewBox="0 0 350 325" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M317.845 130.297V162.107H286.707V130.297H317.845Z" fill="white" stroke="white" stroke-width="0.749679"/>
<path d="M31.3613 195.289V227.85H159.357V195.289H190.495V259.66H126.872V292.814H222.98V227.85H318.491V195.289H349.478V259.66H317.742V292.064H285.854V324.625H63.998V292.064H32.1104V259.66H0.375V195.289H31.3613Z" fill="white" stroke="white" stroke-width="0.749679"/>
<path d="M158.72 130.297V162.107H127.582V130.297H158.72Z" fill="white" stroke="white" stroke-width="0.749679"/>
<path d="M285.903 0.375V32.9346H317.791V97.1504H32.1602V32.9346H64.0479V0.375H285.903Z" fill="white" stroke="white" stroke-width="0.749679"/>
<path d="M349.626 65.3262V97.1367H318.488V65.3262H349.626Z" fill="white" stroke="white" stroke-width="0.749679"/>
<path d="M31.5127 65.3262V97.1367H0.375V65.3262H31.5127Z" fill="white" stroke="white" stroke-width="0.749679"/>
</svg>
              </div>
              <span className="font-mono text-sm font-medium">bring-id</span>
            </div>
            <div className="flex items-center space-x-3">
              {walletConnected && (
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-sm font-mono text-muted-foreground">{walletAddress}</span>
                </div>
              )}
              <Badge variant="outline" className="font-mono text-xs">
                v0.1.0-beta
              </Badge>
            </div>
          </div>
        </div>
      </header>

      {/* Progress Steps */}
      {currentStep > 0 && (
        <div className="border-b bg-muted/30">
          <div className="container mx-auto px-4 py-4 max-w-5xl">
            <div className="flex justify-between items-center">
              {[1, 2, 3, 4, 5].map((step, index) => (
                <React.Fragment key={step}>
                  <StepIndicator step={step} active={currentStep === step} completed={currentStep > step} />
                  {index < 4 && (
                    <div
                      className={`flex-1 h-px mx-2 transition-all ${currentStep > step ? "bg-primary" : "bg-border"}`}
                    ></div>
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>
        </div>
      )}

      <div className="container mx-auto px-4 py-8 max-w-5xl space-y-8">
        {/* Step 0: Introduction */}
        {currentStep === 0 && (
          <>
            {/* Hero Section */}
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <Code2 className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm text-muted-foreground font-mono">identity-system</span>
              </div>

              <div className="space-y-2">
                <h1 className="text-3xl md:text-4xl font-bold tracking-tight">Setup Bring ID and Claim BRING Tokens</h1>
                <p className="text-lg text-muted-foreground max-w-2xl">
                  Transform your web2 accounts into private, verifiable credentials and earn rewards for being human.
                </p>
              </div>

              <div className="flex flex-col sm:flex-row gap-3 pt-2">
                <Button className="font-mono bg-black" onClick={() => setCurrentStep(1)}>
                  Get Started
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
                <Button variant="outline" className="font-mono">
                  Whitepaper
                  <ExternalLink className="ml-2 h-4 w-4" />
                </Button>
              </div>

              <div className="flex flex-wrap gap-4 text-xs text-muted-foreground mt-4">
                <span className="flex items-center">
                  <Lock className="h-3 w-3 mr-1" />
                  No biometrics
                </span>
                <span className="flex items-center">
                  <Shield className="h-3 w-3 mr-1" />
                  No tracking
                </span>
                <span className="flex items-center">
                  <Key className="h-3 w-3 mr-1" />
                  Your data stays yours
                </span>
              </div>
            </div>

            <Separator />

            <div className="space-y-6">
              <div className="space-y-2">
                <h2 className="text-2xl font-bold">What is Bring ID?</h2>
                <p className="text-muted-foreground">
                  A privacy-preserving identity system that lets you prove you're a real human without revealing who you
                  are. By leveraging your existing web2 accounts (GitHub, Twitter, Steam, etc.), you can create a
                  composable digital identity that unlocks access to airdrops, DAO voting, and exclusive communities.
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <Globe className="h-4 w-4" />
                      <CardTitle className="text-base">Universal</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <CardDescription>Works with any web2 data</CardDescription>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <Lock className="h-4 w-4" />
                      <CardTitle className="text-base">Zero Knowledge</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <CardDescription>Your data stays private</CardDescription>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader className="pb-3">
                    <div className="flex items-center space-x-2">
                      <Trophy className="h-4 w-4" />
                      <CardTitle className="text-base">Earn Rewards</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <CardDescription>Get BRING tokens for verifying</CardDescription>
                  </CardContent>
                </Card>
              </div>
            </div>

            <Separator />

            <div className="space-y-6">
              <div className="space-y-2">
                <h2 className="text-2xl font-bold">Privacy-First Architecture</h2>
                <p className="text-muted-foreground">Built with cutting-edge cryptographic protocols.</p>
              </div>

              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <div className="flex items-start space-x-3">
                      <div className="p-2 bg-muted rounded-md">
                        <Shield className="h-4 w-4" />
                      </div>
                      <div className="space-y-1">
                        <CardTitle className="text-lg">zKTLS: Zero-Knowledge Web Proofs</CardTitle>
                        <CardDescription>
                          Our browser extension uses zKTLS (zero-knowledge Transport Layer Security) to create
                          cryptographic proofs of your web2 accounts. This means you can prove you have 100+ GitHub
                          stars or 5+ Airbnb stays without revealing your username, repositories, or any personal data.
                        </CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                </Card>

                <Card>
                  <CardHeader>
                    <div className="flex items-start space-x-3">
                      <div className="p-2 bg-muted rounded-md">
                        <Key className="h-4 w-4" />
                      </div>
                      <div className="space-y-1">
                        <CardTitle className="text-lg">ZKPs: Anonymous Claiming</CardTitle>
                        <CardDescription>
                          When you claim tokens or participate in DAOs, you generate Zero-Knowledge Proofs (ZKPs) that
                          demonstrate your humanity and reputation score without linking back to your specific accounts.
                          Using Semaphore-style nullifiers, we ensure you can't double-claim while keeping your identity
                          completely private.
                        </CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                </Card>
              </div>
            </div>

            <Separator />

            <div className="space-y-6">
              <div className="space-y-2">
                <h2 className="text-2xl font-bold">Simple 3-Step Process</h2>
                <p className="text-muted-foreground">Get started in minutes, not hours.</p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card>
                  <CardHeader>
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium">
                        1
                      </div>
                      <CardTitle className="text-lg">Connect Accounts</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription>Link web2 accounts via zKTLS</CardDescription>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium">
                        2
                      </div>
                      <CardTitle className="text-lg">Build Score</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription>Verify more to increase reputation</CardDescription>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium">
                        3
                      </div>
                      <CardTitle className="text-lg">Claim Tokens</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription>Earn BRING based on your score</CardDescription>
                  </CardContent>
                </Card>
              </div>
            </div>

            <Separator />

            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Ready to get started?</CardTitle>
                <CardDescription>Join thousands of users building their digital identity.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex flex-col sm:flex-row gap-3">
                  <Button className="font-mono" onClick={() => setCurrentStep(1)}>
                    Get Started
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                  <Button variant="outline" className="font-mono">
                    Read Whitepaper
                    <ExternalLink className="ml-2 h-4 w-4" />
                  </Button>
                </div>

                <div className="flex flex-wrap gap-4 text-xs text-muted-foreground">
                  <span className="flex items-center">
                    <Lock className="h-3 w-3 mr-1" />
                    No biometrics
                  </span>
                  <span className="flex items-center">
                    <Shield className="h-3 w-3 mr-1" />
                    No tracking
                  </span>
                  <span className="flex items-center">
                    <Key className="h-3 w-3 mr-1" />
                    Your data stays yours
                  </span>
                </div>
              </CardContent>
            </Card>

            <div className="pt-8 pb-4">
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <div className="flex items-center space-x-2">
                  <span className="font-mono">bring-id</span>
                  <Badge variant="outline" className="font-mono text-xs">
                    MIT License
                  </Badge>
                </div>
                <div className="flex items-center space-x-4">
                  <span>Built with shadcn/ui</span>
                  <span>â€¢</span>
                  <span>Privacy-first</span>
                </div>
              </div>
            </div>
          </>
        )}

        {/* Step 1: Install Extension */}
        {currentStep === 1 && (
          <Card>
            <CardHeader className="text-center">
              <div className="w-16 h-16 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                <Shield className="w-8 h-8" />
              </div>
              <CardTitle className="text-2xl font-mono">Install Bring ID Extension</CardTitle>
              <CardDescription>Start by installing our browser extension to enable zkTLS verification</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  The Bring ID extension creates zero-knowledge proofs of your web2 accounts without exposing your
                  credentials. It runs locally in your browser and never sends your login information to our servers.
                </AlertDescription>
              </Alert>
              <Button
                onClick={() => {
                  setExtensionInstalled(true)
                  setTimeout(() => setCurrentStep(2), 500)
                }}
                className="w-full font-mono"
              >
                Install Extension
                <ExternalLink className="ml-2 h-4 w-4" />
              </Button>
              <div className="text-center">
                <p className="text-sm text-muted-foreground font-mono">
                  Compatible with Chrome, Firefox, and Brave browsers
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Step 2: Connect Wallet */}
        {currentStep === 2 && (
          <Card>
            <CardHeader className="text-center">
              <div className="w-16 h-16 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                <Wallet className="w-8 h-8" />
              </div>
              <CardTitle className="text-2xl font-mono">Connect Your Wallet</CardTitle>
              <CardDescription>Connect your crypto wallet to create your Bring ID</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  Your wallet address will be used to generate a unique Bring ID key. This ensures only you can control
                  your identity credentials and claim tokens.
                </AlertDescription>
              </Alert>
              <Button onClick={connectWallet} disabled={isConnectingWallet} className="w-full font-mono">
                {isConnectingWallet && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isConnectingWallet ? "Connecting..." : "Connect MetaMask"}
                {!isConnectingWallet && <ChevronRight className="ml-2 h-4 w-4" />}
              </Button>
              <div className="grid grid-cols-2 gap-3">
                <Button variant="outline" className="font-mono" disabled={isConnectingWallet}>
                  WalletConnect
                </Button>
                <Button variant="outline" className="font-mono" disabled={isConnectingWallet}>
                  Coinbase Wallet
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Step 3: Create Key */}
        {currentStep === 3 && (
          <Card>
            <CardHeader className="text-center">
              <div className="w-16 h-16 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                <Shield className="w-8 h-8" />
              </div>
              <CardTitle className="text-2xl font-mono">Create Your Bring ID Key</CardTitle>
              <CardDescription>Sign a message to generate your unique identity key</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  <div>
                    <strong>How this works:</strong> We'll ask you to sign a random nonce with your wallet. This
                    signature, combined with your wallet's public key, generates a deterministic Bring ID key. This
                    means:
                    <ul className="mt-2 space-y-1 text-sm">
                      <li>â€¢ Your Bring ID is cryptographically tied to your wallet</li>
                      <li>â€¢ You can always recover it by signing with the same wallet</li>
                      <li>â€¢ No one else can create or access your Bring ID</li>
                      <li>â€¢ Your web2 verifications remain private through zkTLS</li>
                    </ul>
                  </div>
                </AlertDescription>
              </Alert>
              <Card className="bg-muted">
                <CardContent className="pt-4 font-mono text-sm">
                  <div className="text-muted-foreground mb-1">Message to sign:</div>
                  <div>Bring ID Authentication: 0x7f3a9b2c4e1d</div>
                </CardContent>
              </Card>
              <Button onClick={createKey} disabled={isCreatingKey} className="w-full font-mono">
                {isCreatingKey && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isCreatingKey ? "Creating Key..." : "Sign Message"}
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Step 4: Combined Verification & Overview */}
        {currentStep === 4 && (
          <div className="space-y-6">
            <Card>
              <CardHeader className="text-center">
                <div className="w-16 h-16 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                  <Award className="w-8 h-8" />
                </div>
                <CardTitle className="text-2xl font-mono">Complete Verifications & Earn BRING Tokens</CardTitle>
                <CardDescription>Connect your accounts to increase your Bring Score and claim tokens</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <Card>
                  <CardContent className="pt-6">
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-sm font-medium font-mono">Current Bring Score</span>
                      <span className="text-sm text-muted-foreground font-mono">
                        Min: {MIN_SCORE_FOR_ELIGIBILITY} â€¢ Max: {MAX_TOTAL_SCORE}
                      </span>
                    </div>
                    <div className="text-3xl font-bold font-mono mb-3">
                      {bringScore} / {MAX_TOTAL_SCORE}
                    </div>
                    <Progress value={(bringScore / MAX_TOTAL_SCORE) * 100} className="mb-3" />
                    <div className="grid grid-cols-2 gap-4 mt-4">
                      <div className="text-center">
                        <div className="text-sm text-muted-foreground font-mono">Claimable Tokens</div>
                        <div className="text-xl font-bold font-mono text-green-600">
                          {claimableTokens.toLocaleString()}
                        </div>
                      </div>
                      <div className="text-center">
                        <div className="text-sm text-muted-foreground font-mono">Status</div>
                        <div
                          className={`text-sm font-medium font-mono ${bringScore >= MIN_SCORE_FOR_ELIGIBILITY ? "text-green-600" : "text-orange-600"}`}
                        >
                          {bringScore >= MIN_SCORE_FOR_ELIGIBILITY
                            ? "âœ“ Eligible to Claim"
                            : `Need ${MIN_SCORE_FOR_ELIGIBILITY - bringScore} more points`}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Alert>
                  <Info className="h-4 w-4" />
                  <AlertDescription>
                    <div>
                      Each verification adds to your Bring Score. Reach a score of {MIN_SCORE_FOR_ELIGIBILITY} to become
                      eligible for the BRING token airdrop. Higher scores unlock more tokens!
                    </div>
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-xl font-mono">Available Verifications</CardTitle>
                <CardDescription>Each verification adds points and increases your token reward</CardDescription>
              </CardHeader>
              <CardContent className="space-y-0 p-0">
                {" "}
                {/* Adjusted padding for list items */}
                {VERIFICATION_PLATFORMS.map((platform, index) => {
                  const isVerified = verifications[platform.id as keyof typeof verifications]
                  const isVerifyingCurrent = verifyingId === platform.id && (verificationTimers[platform.id] || 0) > 0

                  const currentPotentialScore = bringScore + (isVerified ? 0 : platform.points)
                  const currentPotentialTokens =
                    currentPotentialScore >= MIN_SCORE_FOR_ELIGIBILITY
                      ? BASE_TOKEN_REWARD + (currentPotentialScore - MIN_SCORE_FOR_ELIGIBILITY) * BONUS_TOKENS_PER_POINT
                      : 0
                  const tokenIncrease = Math.max(0, currentPotentialTokens - claimableTokens)

                  let buttonContent
                  let buttonClasses =
                    "font-mono w-36 min-h-[38px] flex items-center justify-center text-xs px-2 py-1 h-auto" // Adjusted button size

                  if (isVerified) {
                    buttonContent = (
                      <>
                        <Check className="mr-1.5 h-3.5 w-3.5" />
                        Verified
                      </>
                    )
                    buttonClasses += " bg-green-200 text-green-900 hover:bg-green-300 border-green-300"
                  } else if (isVerifyingCurrent) {
                    buttonContent = (
                      <div className="flex items-center justify-center space-x-1.5">
                        <Loader2 className="h-3.5 w-3.5 animate-spin" />
                        <span className="tabular-nums">{formatTime(verificationTimers[platform.id])}</span>
                      </div>
                    )
                    buttonClasses += " bg-yellow-200 text-yellow-900 hover:bg-yellow-300 border-yellow-300"
                  } else {
                    buttonContent = "Verify"
                    buttonClasses += " bg-foreground text-background hover:bg-foreground/90" // Default button style
                  }

                  return (
                    <div
                      key={platform.id}
                      className={`flex items-center justify-between p-4 ${index < VERIFICATION_PLATFORMS.length - 1 ? "border-b" : ""} ${
                        isVerified ? "bg-green-50" : isVerifyingCurrent ? "bg-yellow-50" : "bg-card"
                      } transition-colors duration-150`}
                    >
                      <div className="flex items-center space-x-3">
                        <div
                          className={`w-9 h-9 rounded-md flex items-center justify-center ${
                            isVerified
                              ? "bg-green-200 text-green-900"
                              : isVerifyingCurrent
                                ? "bg-yellow-200 text-yellow-900"
                                : "bg-muted"
                          }`}
                        >
                          {isVerified ? (
                            <Check className="w-4 h-4" />
                          ) : isVerifyingCurrent ? (
                            <Loader2 className="w-4 h-4 animate-spin" />
                          ) : (
                            <div className="w-4 h-4 bg-muted-foreground/50 rounded-sm"></div> // Placeholder icon
                          )}
                        </div>
                        <div className="flex-1">
                          <span className="font-medium font-mono text-sm">{platform.name}</span>
                          <div className="text-xs text-muted-foreground font-mono">{platform.requirement}</div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="font-mono text-xs h-auto py-0.5 px-1.5">
                          +{platform.points} pts
                        </Badge>
                        {!isVerified && !isVerifyingCurrent && tokenIncrease > 0 && (
                          <Badge
                            variant="outline"
                            className="font-mono text-xs h-auto py-0.5 px-1.5 border-amber-500 text-amber-600 border-none bg-amber-100"
                          >
                            +{tokenIncrease.toLocaleString()} tokens
                          </Badge>
                        )}
                        <Button
                          onClick={() => handleVerifyPlatform(platform.id)}
                          disabled={isVerified || isVerifyingCurrent}
                          variant={isVerified || isVerifyingCurrent ? "secondary" : "default"}
                          size="sm" // Using size="sm" for a more compact button
                          className={buttonClasses}
                        >
                          {buttonContent}
                        </Button>
                      </div>
                    </div>
                  )
                })}
              </CardContent>
            </Card>

            {bringScore >= MIN_SCORE_FOR_ELIGIBILITY && (
              <Card className="bg-green-50 border-green-200">
                <CardContent className="pt-6">
                  <div className="text-center mb-4">
                    <div className="text-lg font-medium font-mono text-green-700 mb-2">
                      ðŸŽ‰ Congratulations! You're eligible to claim tokens
                    </div>
                    <div className="text-2xl font-bold font-mono text-green-600">
                      {claimableTokens.toLocaleString()} BRING Tokens
                    </div>
                  </div>
                  <Button onClick={initiateTokenClaim} className="w-full font-mono bg-green-600 hover:bg-green-700">
                    Claim {claimableTokens.toLocaleString()} BRING Tokens
                  </Button>
                </CardContent>
              </Card>
            )}
          </div>
        )}

        {/* Step 5: Claim Confirmation */}
        {currentStep === 5 && (
          <Card>
            <CardHeader className="text-center">
              <div className="w-16 h-16 bg-green-100 text-green-600 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Check className="w-8 h-8" />
              </div>
              <CardTitle className="text-2xl font-mono">Claim Initiated!</CardTitle>
              <CardDescription>Your BRING tokens are scheduled for delivery</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <Card className="bg-green-50 border-green-200">
                <CardContent className="pt-6 text-center">
                  <div className="text-3xl font-bold text-green-600 font-mono mb-2">
                    {claimableTokens.toLocaleString()} BRING
                  </div>
                  <div className="text-sm text-green-700 font-mono">Will be sent to {walletAddress}</div>
                </CardContent>
              </Card>
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  <div>
                    <strong>Token Distribution Schedule:</strong>
                    <p className="mt-2">
                      We batch all token claims and process them once daily at 23:59 UTC. This approach:
                    </p>
                    <ul className="mt-2 space-y-1 text-sm">
                      <li>â€¢ Reduces gas fees through batch transactions</li>
                      <li>â€¢ Ensures fair distribution timing for all users</li>
                      <li>â€¢ Provides predictable delivery schedules</li>
                    </ul>
                    <p className="mt-2">You'll receive your tokens within 24 hours.</p>
                  </div>
                </AlertDescription>
              </Alert>
              <div className="flex items-center justify-center space-x-2 text-muted-foreground">
                <Clock className="w-4 h-4" />
                <span className="text-sm font-mono">
                  Next distribution in {Math.floor(Math.random() * 12) + 1} hours
                </span>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <Button variant="outline" className="font-mono">
                  View Transaction
                </Button>
                <Button onClick={() => setCurrentStep(4)} className="font-mono">
                  Add More Verifications
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
